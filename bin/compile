#!/usr/bin/env ruby

require 'yaml'

$stdout.sync = true

def indent(msg)
  puts "       #{msg}"
end

BUILD_DIR=ARGV[0]
CACHE_DIR=ARGV[1]
ENV_DIR=ARGV[2]

puts "-----> Found an .oracle.yml"

ORACLE_CONFIG = YAML.load_file("#{BUILD_DIR}/.oracle.yml")

ORACLE_INSTANT_CLIENT_DIR="vendor/instantclient_21_5"
# ORACLE_INSTANT_CLIENT_URL="https://www.dropbox.com/s/raw/om9k926llix2ln1/oracle-instantclient-full-12.1-linux.x64.tar.gz"
ORACLE_INSTANT_CLIENT_URL="https://download.oracle.com/otn_software/linux/instantclient/215000/instantclient-basic-linux.x64-21.5.0.0.0dbru.zip"
ORACLE_INSTANT_CLIENT_FILENAME=ORACLE_INSTANT_CLIENT_URL.split(/\//).last
ORACLE_INSTANT_CLIENT_ARCHIVE=File.join(CACHE_DIR,ORACLE_INSTANT_CLIENT_FILENAME)

indent "Making directory #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}"
`mkdir -p #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}`

unless File.exists?(ORACLE_INSTANT_CLIENT_ARCHIVE)
  indent "Downloading and extracting #{ORACLE_INSTANT_CLIENT_FILENAME}"

  result = `wget -q #{ORACLE_INSTANT_CLIENT_URL} -O #{ORACLE_INSTANT_CLIENT_ARCHIVE}`
  `cksum #{ORACLE_INSTANT_CLIENT_ARCHIVE}`
end

`unzip #{ORACLE_INSTANT_CLIENT_ARCHIVE} -d #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}/lib`

unless $?.success?
  indent "Failure while downloading Oracle instant client archive: #{$?}"
  exit 1
end

indent "Successfully extracted #{ORACLE_INSTANT_CLIENT_FILENAME}"

ORACLE_NETWORK_ADMIN_DIR = "#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}/network/admin"
`mkdir -p #{ORACLE_NETWORK_ADMIN_DIR}`

TNSNAMES_FILENAME = ORACLE_CONFIG['tnsnames.ora']
if File.exists?(File.join(BUILD_DIR,TNSNAMES_FILENAME))
  indent "Symlinking #{TNSNAMES_FILENAME} to #{ORACLE_INSTANT_CLIENT_DIR}/network/admin/tnsnames.ora"
  `ln -sf #{File.join('/app',TNSNAMES_FILENAME)} #{ORACLE_NETWORK_ADMIN_DIR}/tnsnames.ora`
end

SQLNET_FILENAME = ORACLE_CONFIG['sqlnet.ora']
if File.exists?(File.join(BUILD_DIR,SQLNET_FILENAME))
  indent "Symlinking #{SQLNET_FILENAME} to #{ORACLE_INSTANT_CLIENT_DIR}/network/admin/sqlnet.ora"
  `ln -sf #{File.join('/app',SQLNET_FILENAME)} #{ORACLE_NETWORK_ADMIN_DIR}/sqlnet.ora`
end

indent "Create profile.d script"
`mkdir -p #{BUILD_DIR}/.profile.d`

open("#{BUILD_DIR}/.profile.d/oracle.sh", "w") do |f|
  ORACLE_HOME = "/app/#{ORACLE_INSTANT_CLIENT_DIR}"
  f.puts "export ORACLE_HOME=#{ORACLE_HOME}"
  f.puts "export LD_LIBRARY_PATH=#{ORACLE_HOME}/lib:$LD_LIBRARY_PATH"
  f.puts "export PATH=#{ORACLE_HOME}:$PATH"
  f.puts "export TNS_ADMIN=#{ORACLE_HOME}/network/admin"
end

indent "Save build LD_LIBRARY_PATH to ENV_DIR"

LD_LIBRARY_PATH_FILE = File.join(ENV_DIR, 'LD_LIBRARY_PATH')
existing_ld_library_path = `cat #{LD_LIBRARY_PATH_FILE}`  if File.exists?(LD_LIBRARY_PATH_FILE)

open(File.join(ENV_DIR,'LD_LIBRARY_PATH'), 'w') do |f|
  value = "#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}"
  unless existing_ld_library_path.nil? || existing_ld_library_path.trim.empty?
    value += ":#{existing_ld_library_path}"
  end
  f.puts value
end

indent "Done!"
